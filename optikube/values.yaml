# Default values for optikube.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# General Settings
replicaCount: 1
namespace: optikube

# Image configurations
images:
  dashboard:
    repository: optikube/optikube-dashboard
    tag: "latest"
    pullPolicy: Always
  operator:
    repository: optikube/optikube-operator
    tag: "latest"
    pullPolicy: Always
  redis:
    repository: redis
    tag: "latest"
    pullPolicy: IfNotPresent

# Service account settings
serviceAccount:
  create: true
  name: optikube-svc-account
  annotations: {}

# Deployment-specific settings
resources:
  dashboard:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      cpu: "100m"
      memory: "128Mi"
  operator:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      cpu: "100m"
      memory: "128Mi"
  redis:
    requests:
      cpu: "25m"
      memory: "32Mi"
    limits:
      cpu: "50m"
      memory: "64Mi"

# Service settings
# Do not change the preset ports as optikube and it's services are configured to work on these ports only.
services:
  dashboard:
    type: ClusterIP
    port: 3000
  operator:
    type: LoadBalancer
    port: 8080
  redis:
    type: ClusterIP
    port: 6379

# Dependencies
dependencies:
  - name: cost-analyzer
    alias: kubecost
    version: "2.2.2"
    repository: "https://kubecost.github.io/cost-analyzer/"
  - name: keda
    version: "2.14.2"
    repository: "https://kedacore.github.io/charts"
# RBAC settings
rbac:
  create: true
  rules:
    - apiGroups: ["", "apps", "autoscaling", "keda.sh"]
      resources: ["*"]
      verbs: ["*"]

# Probes
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelay: 30
  timeout: 10
  period: 10
readinessProbe:
  httpGet:
    path: /ready
    port: 8080
  initialDelay: 30
  timeout: 10      
  period: 10

# Ingress settings
ingress:
  enabled: false
  annotations: {}

# Additional settings like autoscaling, nodeSelectors, tolerations, and affinity
autoscaling:
  enabled: false
nodeSelector: {}
tolerations: []
affinity: {}

kubecost:
  global:
    grafana:
      enabled: false
    prometheus:
      enabled: false
    thanos:
      enabled: false
    kubecostMetrics:
      enabled: false

  kubecostFrontend:
    enabled: false

  networkCosts:
    enabled: false

  serviceMonitor:
    enabled: false

  persistentVolume:
    enabled: false

  ingress:
    enabled: false

  cloudCost:
    enabled: false

  kubecostModel:
    resources:
      requests:
        cpu: "50m"
        memory: "64Mi"
      limits:
        cpu: "100m"
        memory: "128Mi"